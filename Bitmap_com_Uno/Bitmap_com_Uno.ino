/*

  Bitmap.pde
  
  Show simple bitmap

  >>> Before compiling: Please remove comment from the constructor of the 
  >>> connected graphics display (see below).

  Universal 8bit Graphics Library, http://code.google.com/p/u8glib/
  
  Copyright (c) 2011, olikraus@gmail.com
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this list 
    of conditions and the following disclaimer.
    
  * Redistributions in binary form must reproduce the above copyright notice, this 
    list of conditions and the following disclaimer in the documentation and/or other 
    materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  
*/

#define PIN_E 7
#define PIN_RW 6
#define PIN_RS 5

#include "U8glib.h"
U8GLIB_ST7920_128X64 u8g(PIN_E, PIN_RW, PIN_RS, U8G_PIN_NONE);

//------------------------------------------------------------------------------
// File generated by LCD Assistant
// http://en.radzio.dxp.pl/bitmap_converter/
//------------------------------------------------------------------------------

const uint8_t rook_bitmap[] PROGMEM = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf8,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0xe0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf8,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xf0,0x0,0x0,0x0,0x3,0xef,0xf0,0x1,0xfc,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xf0,0x0,0x0,0x0,
0x3,0xef,0xfc,0x1,0xfc,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xf0,0x0,0x0,0x0,0x7,0xef,0xfe,0x1,0xfc,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xf0,0x0,0x0,0x0,0x7,0xef,0xff,0x1,0xfc,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xe0,0x0,0x0,0x0,0x7,0xef,0xff,0x81,0xfc,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0xc0,0x0,0x0,0x0,0x7,0xe0,0xff,0x81,0xfc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xe0,0x3f,0x81,0xfc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0xe0,0x3f,0x81,0xfc,0xf,0x0,0x3c,0x7,0x8f,0xf0,0x3,0xc0,0x70,0x3,0x80,0x7,0xe0,0x3f,0x81,0xfc,0x1f,0x80,0x7c,0xf,0xdf,0xfc,0x3,0xe0,0xf8,0x7,0xc0,
0x7,0xe0,0x3f,0x81,0xfc,0x1f,0x80,0x7e,0xf,0xff,0xfe,0x7,0xe1,0xfc,0xf,0xe0,0x7,0xe0,0x7f,0x1,0xfc,0x1f,0x80,0xfe,0xf,0xff,0xfe,0x7,0xe1,0xfe,0x1f,0xe0,0x7,0xef,0xfe,0x1,0xfc,0x1f,0x80,0xfe,0xf,0xff,0xff,0x7,0xf1,0xff,0x3f,0xe0,0x7,0xef,0xfc,0x1,0xfc,0x1f,0x80,0xfe,0xf,0xf9,0xff,0x7,0xf0,0xff,0xbf,0xc0,0x7,0xef,0xfe,0x1,0xfc,0x1f,0x80,0xfe,0xf,0xe0,0x7f,0x7,0xf0,0x7f,0xff,0x80,0x7,0xef,0xff,0x81,0xfc,0x1f,0x80,0xfe,0xf,0xe0,0x7f,0x7,0xf0,0x3f,0xff,0x0,0x7,0xef,0xff,0xc1,0xfc,0x1f,0x80,0xfe,0xf,0xc0,0x7f,0x7,0xf0,0x1f,0xfe,0x0,0x7,0xef,0xff,0xc1,0xfc,0x1f,0x80,0xfe,0xf,0xc0,0x3f,0x7,0xf0,0xf,0xfc,0x0,
0x7,0xe0,0x3f,0xe1,0xfc,0x1f,0x80,0xfe,0xf,0xc0,0x3f,0x7,0xf0,0x7,0xf8,0x0,0x7,0xe0,0xf,0xe1,0xfc,0x1f,0x80,0xfe,0xf,0xc0,0x3f,0x7,0xf0,0xf,0xfc,0x0,0x7,0xe0,0xf,0xe1,0xfc,0x1f,0x80,0xfe,0xf,0xc0,0x3f,0x7,0xf0,0x1f,0xfe,0x0,0x7,0xe0,0xf,0xe1,0xfc,0x1f,0x80,0xfe,0xf,0xc0,0x3f,0x7,0xf0,0x3f,0xfe,0x0,0x7,0xe0,0xf,0xe1,0xfc,0x1f,0x80,0xfe,0xf,0xc0,0x3f,0x7,0xf0,0x7f,0xff,0x0,0x7,0xe0,0x1f,0xe1,0xfc,0x1f,0xc0,0xfe,0xf,0xc0,0x3f,0x7,0xf0,0x7f,0xff,0x80,0x7,0xe0,0x3f,0xe1,0xfc,0x1f,0xe1,0xfe,0xf,0xc0,0x3f,0x7,0xf0,0xff,0x3f,0xc0,0x7,0xef,0xff,0xe1,0xfc,0x1f,0xff,0xfc,0xf,0xc0,0x3f,0x7,0xf1,0xfe,0x1f,0xe0,
0x7,0xef,0xff,0xc1,0xfc,0xf,0xff,0xfc,0xf,0xc0,0x3f,0x7,0xf3,0xfc,0xf,0xf0,0x7,0xef,0xff,0x81,0xfc,0xf,0xff,0xf8,0xf,0xc0,0x3f,0x7,0xe3,0xf8,0xf,0xf0,0x7,0xef,0xff,0x0,0xfc,0x7,0xff,0xf8,0xf,0xc0,0x3f,0x7,0xe3,0xf8,0x7,0xf0,0x3,0xef,0xfc,0x0,0xf8,0x3,0xff,0xe0,0xf,0xc0,0x3f,0x3,0xe1,0xf0,0x3,0xe0,0x0,0xef,0xc0,0x0,0x70,0x0,0xff,0xc0,0x7,0x80,0x1e,0x1,0xc0,0xe0,0x1,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0xf,0xe0,0xf8,0xf,0xc0,0xc3,0x0,0xfc,0x6,0x0,0x7e,0x0,0xfc,0x6,0x1,0xc0,0xf,0xe0,0xf8,0x1f,0xc0,0xe3,0x1,0xfe,0x6,0x0,0xff,0x1,0xfc,0x6,0x1,0xc0,
0x3,0x0,0xc0,0x1c,0x0,0xe3,0x3,0x86,0x6,0x1,0xc3,0x3,0x84,0x6,0x3,0x60,0x3,0x0,0xc0,0x18,0x0,0xf3,0x3,0x7,0x6,0x1,0x83,0x83,0x0,0x6,0x3,0x60,0x3,0x0,0xf8,0x18,0x0,0xdb,0x3,0x7,0x6,0x1,0x83,0x83,0x3e,0x6,0x3,0x60,0x3,0x0,0xf8,0x18,0x0,0xdf,0x3,0x7,0x6,0x1,0x83,0x83,0x1e,0x6,0x6,0x30,0x3,0x0,0xc0,0x18,0x0,0xcf,0x3,0x87,0x6,0x1,0xc3,0x3,0x86,0x6,0x7,0xf0,0x3,0x0,0xc0,0x1c,0x40,0xc7,0x1,0x8e,0x7,0x0,0xc7,0x3,0x8e,0x6,0xf,0xf0,0x3,0x0,0xf8,0xf,0xe0,0xc3,0x1,0xfc,0x7,0xe0,0xfe,0x1,0xfc,0x6,0xc,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
// setup u8g object, please remove comment from one of the following constructor calls

//U8GLIB_NHD27OLED_BW u8g(13, 11, 10, 9);       // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_NHD27OLED_2X_BW u8g(13, 11, 10, 9); // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_NHD27OLED_GR u8g(13, 11, 10, 9);       // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_NHD27OLED_2X_GR u8g(13, 11, 10, 9);  // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_DOGS102 u8g(13, 11, 10, 9);                    // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_DOGM132 u8g(13, 11, 10, 9);                    // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_DOGM128 u8g(13, 11, 10, 9);                    // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_ST7920_128X64 u8g(8, 9, 10, 11, 4, 5, 6, 7, 18, U8G_PIN_NONE, U8G_PIN_NONE, 17, 16);   // 8Bit Com: D0..D7: 8,9,10,11,4,5,6,7 en=18, di=17,rw=16
//U8GLIB_ST7920_128X64 u8g(18, 16, 17, U8G_PIN_NONE);                  // SPI Com: SCK = en = 18, MOSI = rw = 16, CS = di = 17
//U8GLIB_ST7920_192X32 u8g(8, 9, 10, 11, 4, 5, 6, 7, 18, U8G_PIN_NONE, U8G_PIN_NONE, 17, 16);   // 8Bit Com: D0..D7: 8,9,10,11,4,5,6,7 en=18, di=17,rw=16
//U8GLIB_ST7920_192X32 u8g(18, 16, 17, U8G_PIN_NONE);                  // SPI Com: SCK = en = 18, MOSI = rw = 16, CS = di = 17
//U8GLIB_LM6059 u8g(13, 11, 10, 9);                    // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_LM6063 u8g(13, 11, 10, 9);                    // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_DOGXL160_BW u8g(10, 9);            // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_DOGXL160_GR u8g(13, 11, 10, 9);             // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_DOGXL160_2X_BW u8g(13, 11, 10, 9);            // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_DOGXL160_2X_GR u8g(13, 11, 10, 9);             // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_PCD8544 u8g(13, 11, 10, 9, 8);                    // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9, Reset = 8
//U8GLIB_PCF8812 u8g(13, 11, 10, 9, 8);                    // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9, Reset = 8
//U8GLIB_KS0108_128 u8g(8, 9, 10, 11, 4, 5, 6, 7, 18, 14, 15, 17, 16); // 8Bit Com: D0..D7: 8,9,10,11,4,5,6,7 en=18, cs1=14, cs2=15,di=17,rw=16
//U8GLIB_LC7981_160X80 u8g(8, 9, 10, 11, 4, 5, 6, 7,  18, 14, 15, 17, 16); // 8Bit Com: D0..D7: 8,9,10,11,4,5,6,7 en=18, cs=14 ,di=15,rw=17, reset = 16
//U8GLIB_LC7981_240X64 u8g(8, 9, 10, 11, 4, 5, 6, 7,  18, 14, 15, 17, 16); // 8Bit Com: D0..D7: 8,9,10,11,4,5,6,7 en=18, cs=14 ,di=15,rw=17, reset = 16
//U8GLIB_LC7981_240X128 u8g(8, 9, 10, 11, 4, 5, 6, 7,  18, 14, 15, 17, 16); // 8Bit Com: D0..D7: 8,9,10,11,4,5,6,7 en=18, cs=14 ,di=15,rw=17, reset = 16
//U8GLIB_SBN1661_122X32 u8g(8,9,10,11,4,5,6,7,14,15, 17, U8G_PIN_NONE, 16); ; // 8Bit Com: D0..D7: 8,9,10,11,4,5,6,7 cs1=14, cs2=15,di=17,rw=16,reset = 16
//U8GLIB_SSD1306_128X64 u8g(13, 11, 10, 9);             // SW SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
//U8GLIB_SSD1306_128X64 u8g(10, 9);             // HW SPI Com: CS = 10, A0 = 9 (Hardware Pins are  SCK = 13 and MOSI = 11)
//U8GLIB_SSD1327_96X96_GR u8g(U8G_I2C_OPT_NONE);             // I2C
//U8GLIB_SSD1327_96X96_2X_GR u8g(U8G_I2C_OPT_NONE);             // I2C
//U8GLIB_NHD_C12864 u8g(13, 11, 10, 9);                    // SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9

/*
const uint8_t rook_bitmap[] PROGMEM = {
  0x00,         // 00000000 
  0x55,         // 01010101
  0x7f,          // 01111111
  0x3e,         // 00111110
  0x3e,         // 00111110 
  0x3e,         // 00111110
  0x3e,         // 00111110 
  0x7f           // 01111111
};

*/

//*************************************************************************************************************
// copiado do outro arquivo para limpar a tela, pois aparecia muito lixo quando ligava a primeira vez

// setup a text screen to support scrolling
#define LINE_MAX 30 
#define ROW_MAX 12
uint8_t screen[ROW_MAX][LINE_MAX];
char* var_teste = "valor:";
int var_teste2 = 3;

// clear entire screen, called during setup
void clear_screen(void) {
  uint8_t i, j;
  for( i = 0; i < ROW_MAX; i++ )
    for( j = 0; j < LINE_MAX; j++ )
      screen[i][j] = 0;  
}

void draw(void) {
  // graphic commands to redraw the complete screen should be placed here  
  // imprime a logo da blunix
  //u8g.drawBitmapP( 0, 0, 16, 64, rook_bitmap);
  
    // graphic commands to redraw the complete screen should be placed here  
  //u8g.setFont(u8g_font_unifont);
  //u8g.setFont(u8g_font_osb21);
  u8g.setFont(u8g_font_courB08);
  u8g.drawStr( 20, 64, "(47) 3041-8874");
  // desenha um box na linha 10, col 12, x box = 20, y box = 30
  //u8g.drawBox(10,12,20,30);

  // teste com variaveis - drawStr somente com caracteres
  u8g.setFont(u8g_font_courB08);
  u8g.drawStr( 20, 15, var_teste);
  
  // funcao print faz o mesmo que o drawStr, porem com numeros
  //u8g.setFont(u8g_font_unifont);
  u8g.setPrintPos(60, 15); 
  //u8g.print("texto");
  // imprime o valor do contador
  u8g.print(var_teste2);
  //u8g.setFont(u8g_font_courB08);
  //u8g.drawStr( 60, 15, var_teste2);


}

//*************************************************************************************************************

void escreve_lcd(void) {
    // picture loop
  u8g.firstPage();  
  do {
    draw();
  } while( u8g.nextPage() );

  // rebuild the picture after some delay
//  delay(500);
}

void setup(void) {
  clear_screen();               // clear screen
  delay(1000);                  // do some delay

}

void loop(void) {
  escreve_lcd();
  if (var_teste2 == 100) {
     var_teste2 = 0;
  } else {
     var_teste2 = var_teste2 + 1;
  }
//  delay(50);
}

